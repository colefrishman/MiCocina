{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Colors = _interopRequireDefault(require(\"./Colors\"));\n\nvar _openURLInBrowser = _interopRequireDefault(require(\"react-native/Libraries/Core/Devtools/openURLInBrowser\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\MiCocina\\\\MiCocina\\\\node_modules\\\\react-native\\\\Libraries\\\\NewAppScreen\\\\components\\\\LearnMoreLinks.js\";\n\nvar links = [{\n  id: 1,\n  title: 'The Basics',\n  link: 'https://reactnative.dev/docs/tutorial',\n  description: 'Explains a Hello World for React Native.'\n}, {\n  id: 2,\n  title: 'Style',\n  link: 'https://reactnative.dev/docs/style',\n  description: 'Covers how to use the prop named style which controls the visuals.'\n}, {\n  id: 3,\n  title: 'Layout',\n  link: 'https://reactnative.dev/docs/flexbox',\n  description: 'React Native uses flexbox for layout, learn how it works.'\n}, {\n  id: 4,\n  title: 'Components',\n  link: 'https://reactnative.dev/docs/components-and-apis',\n  description: 'The full list of components and APIs inside React Native.'\n}, {\n  id: 5,\n  title: 'Navigation',\n  link: 'https://reactnative.dev/docs/navigation',\n  description: 'How to handle moving between screens inside your application.'\n}, {\n  id: 6,\n  title: 'Networking',\n  link: 'https://reactnative.dev/docs/network',\n  description: 'How to use the Fetch API in React Native.'\n}, {\n  id: 7,\n  title: 'Help',\n  link: 'https://reactnative.dev/help',\n  description: 'Need more help? There are many other React Native developers who may have the answer.'\n}, {\n  id: 8,\n  title: 'Follow us on Twitter',\n  link: 'https://twitter.com/reactnative',\n  description: 'Stay in touch with the community, join in on Q&As and more by following React Native on Twitter.'\n}];\n\nvar LinkList = function LinkList() {\n  var isDarkMode = (0, _reactNative.useColorScheme)() === 'dark';\n  return _react.default.createElement(_reactNative.View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, links.map(function (_ref) {\n    var id = _ref.id,\n        title = _ref.title,\n        link = _ref.link,\n        description = _ref.description;\n    return _react.default.createElement(_react.Fragment, {\n      key: id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, _react.default.createElement(_reactNative.View, {\n      style: [styles.separator, {\n        backgroundColor: isDarkMode ? _Colors.default.dark : _Colors.default.light\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }), _react.default.createElement(_reactNative.TouchableOpacity, {\n      accessibilityRole: \"button\",\n      onPress: function onPress() {\n        return (0, _openURLInBrowser.default)(link);\n      },\n      style: styles.linkContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, _react.default.createElement(_reactNative.Text, {\n      style: styles.link,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, title), _react.default.createElement(_reactNative.Text, {\n      style: [styles.description, {\n        color: isDarkMode ? _Colors.default.lighter : _Colors.default.dark\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, description)));\n  }));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    marginTop: 32,\n    paddingHorizontal: 24\n  },\n  linkContainer: {\n    flexWrap: 'wrap',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 8\n  },\n  link: {\n    flex: 2,\n    fontSize: 18,\n    fontWeight: '400',\n    color: _Colors.default.primary\n  },\n  description: {\n    flex: 3,\n    paddingVertical: 16,\n    fontWeight: '400',\n    fontSize: 18\n  },\n  separator: {\n    height: _reactNative.StyleSheet.hairlineWidth\n  }\n});\n\nvar _default = LinkList;\nexports.default = _default;","map":{"version":3,"sources":["D:/MiCocina/MiCocina/node_modules/react-native/Libraries/NewAppScreen/components/LearnMoreLinks.js"],"names":["links","id","title","link","description","LinkList","isDarkMode","styles","container","map","separator","backgroundColor","Colors","dark","light","linkContainer","color","lighter","StyleSheet","create","marginTop","paddingHorizontal","flexWrap","flexDirection","justifyContent","alignItems","paddingVertical","flex","fontSize","fontWeight","primary","height","hairlineWidth"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport Colors from './Colors';\nimport type {Node} from 'react';\nimport openURLInBrowser from 'react-native/Libraries/Core/Devtools/openURLInBrowser';\nimport {\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  useColorScheme,\n  View,\n} from 'react-native';\nimport React, {Fragment} from 'react';\n\nconst links = [\n  {\n    id: 1,\n    title: 'The Basics',\n    link: 'https://reactnative.dev/docs/tutorial',\n    description: 'Explains a Hello World for React Native.',\n  },\n  {\n    id: 2,\n    title: 'Style',\n    link: 'https://reactnative.dev/docs/style',\n    description:\n      'Covers how to use the prop named style which controls the visuals.',\n  },\n  {\n    id: 3,\n    title: 'Layout',\n    link: 'https://reactnative.dev/docs/flexbox',\n    description: 'React Native uses flexbox for layout, learn how it works.',\n  },\n  {\n    id: 4,\n    title: 'Components',\n    link: 'https://reactnative.dev/docs/components-and-apis',\n    description: 'The full list of components and APIs inside React Native.',\n  },\n  {\n    id: 5,\n    title: 'Navigation',\n    link: 'https://reactnative.dev/docs/navigation',\n    description:\n      'How to handle moving between screens inside your application.',\n  },\n  {\n    id: 6,\n    title: 'Networking',\n    link: 'https://reactnative.dev/docs/network',\n    description: 'How to use the Fetch API in React Native.',\n  },\n  {\n    id: 7,\n    title: 'Help',\n    link: 'https://reactnative.dev/help',\n    description:\n      'Need more help? There are many other React Native developers who may have the answer.',\n  },\n  {\n    id: 8,\n    title: 'Follow us on Twitter',\n    link: 'https://twitter.com/reactnative',\n    description:\n      'Stay in touch with the community, join in on Q&As and more by following React Native on Twitter.',\n  },\n];\n\nconst LinkList = (): Node => {\n  const isDarkMode = useColorScheme() === 'dark';\n  return (\n    <View style={styles.container}>\n      {links.map(({id, title, link, description}) => (\n        <Fragment key={id}>\n          <View\n            style={[\n              styles.separator,\n              {\n                backgroundColor: isDarkMode ? Colors.dark : Colors.light,\n              },\n            ]}\n          />\n          <TouchableOpacity\n            accessibilityRole=\"button\"\n            onPress={() => openURLInBrowser(link)}\n            style={styles.linkContainer}>\n            <Text style={styles.link}>{title}</Text>\n            <Text\n              style={[\n                styles.description,\n                {\n                  color: isDarkMode ? Colors.lighter : Colors.dark,\n                },\n              ]}>\n              {description}\n            </Text>\n          </TouchableOpacity>\n        </Fragment>\n      ))}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 32,\n    paddingHorizontal: 24,\n  },\n  linkContainer: {\n    flexWrap: 'wrap',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 8,\n  },\n  link: {\n    flex: 2,\n    fontSize: 18,\n    fontWeight: '400',\n    color: Colors.primary,\n  },\n  description: {\n    flex: 3,\n    paddingVertical: 16,\n    fontWeight: '400',\n    fontSize: 18,\n  },\n  separator: {\n    height: StyleSheet.hairlineWidth,\n  },\n});\n\nexport default LinkList;\n"]},"metadata":{},"sourceType":"script"}