{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _NativeUIManager = _interopRequireDefault(require(\"./NativeUIManager\"));\n\nvar NativeModules = require('../BatchedBridge/NativeModules');\n\nvar Platform = require('../Utilities/Platform');\n\nvar UIManagerProperties = require('./UIManagerProperties');\n\nvar defineLazyObjectProperty = require('../Utilities/defineLazyObjectProperty');\n\nvar viewManagerConfigs = {};\nvar triedLoadingConfig = new Set();\nvar NativeUIManagerConstants = {};\nvar isNativeUIManagerConstantsSet = false;\n\nfunction _getConstants() {\n  if (!isNativeUIManagerConstantsSet) {\n    NativeUIManagerConstants = _NativeUIManager.default.getConstants();\n    isNativeUIManagerConstantsSet = true;\n  }\n\n  return NativeUIManagerConstants;\n}\n\nfunction _getViewManagerConfig(viewManagerName) {\n  if (viewManagerConfigs[viewManagerName] === undefined && global.nativeCallSyncHook && _NativeUIManager.default.getConstantsForViewManager) {\n    try {\n      viewManagerConfigs[viewManagerName] = _NativeUIManager.default.getConstantsForViewManager(viewManagerName);\n    } catch (e) {\n      console.error(\"NativeUIManager.getConstantsForViewManager('\" + viewManagerName + \"') threw an exception.\", e);\n      viewManagerConfigs[viewManagerName] = null;\n    }\n  }\n\n  var config = viewManagerConfigs[viewManagerName];\n\n  if (config) {\n    return config;\n  }\n\n  if (!global.nativeCallSyncHook) {\n    return config;\n  }\n\n  if (_NativeUIManager.default.lazilyLoadView && !triedLoadingConfig.has(viewManagerName)) {\n    var result = _NativeUIManager.default.lazilyLoadView(viewManagerName);\n\n    triedLoadingConfig.add(viewManagerName);\n\n    if (result != null && result.viewConfig != null) {\n      _getConstants()[viewManagerName] = result.viewConfig;\n      lazifyViewManagerConfig(viewManagerName);\n    }\n  }\n\n  return viewManagerConfigs[viewManagerName];\n}\n\nvar UIManagerJS = (0, _extends2.default)({}, _NativeUIManager.default, {\n  createView: function createView(reactTag, viewName, rootTag, props) {\n    if (Platform.OS === 'ios' && viewManagerConfigs[viewName] === undefined) {\n      _getViewManagerConfig(viewName);\n    }\n\n    _NativeUIManager.default.createView(reactTag, viewName, rootTag, props);\n  },\n  getConstants: function getConstants() {\n    return _getConstants();\n  },\n  getViewManagerConfig: function getViewManagerConfig(viewManagerName) {\n    return _getViewManagerConfig(viewManagerName);\n  },\n  hasViewManagerConfig: function hasViewManagerConfig(viewManagerName) {\n    return _getViewManagerConfig(viewManagerName) != null;\n  }\n});\n_NativeUIManager.default.getViewManagerConfig = UIManagerJS.getViewManagerConfig;\n\nfunction lazifyViewManagerConfig(viewName) {\n  var viewConfig = _getConstants()[viewName];\n\n  viewManagerConfigs[viewName] = viewConfig;\n\n  if (viewConfig.Manager) {\n    defineLazyObjectProperty(viewConfig, 'Constants', {\n      get: function get() {\n        var viewManager = NativeModules[viewConfig.Manager];\n        var constants = {};\n        viewManager && Object.keys(viewManager).forEach(function (key) {\n          var value = viewManager[key];\n\n          if (typeof value !== 'function') {\n            constants[key] = value;\n          }\n        });\n        return constants;\n      }\n    });\n    defineLazyObjectProperty(viewConfig, 'Commands', {\n      get: function get() {\n        var viewManager = NativeModules[viewConfig.Manager];\n        var commands = {};\n        var index = 0;\n        viewManager && Object.keys(viewManager).forEach(function (key) {\n          var value = viewManager[key];\n\n          if (typeof value === 'function') {\n            commands[key] = index++;\n          }\n        });\n        return commands;\n      }\n    });\n  }\n}\n\nif (Platform.OS === 'ios') {\n  Object.keys(_getConstants()).forEach(function (viewName) {\n    lazifyViewManagerConfig(viewName);\n  });\n} else if (_getConstants().ViewManagerNames) {\n  _NativeUIManager.default.getConstants().ViewManagerNames.forEach(function (viewManagerName) {\n    defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {\n      get: function get() {\n        return _NativeUIManager.default.getConstantsForViewManager(viewManagerName);\n      }\n    });\n  });\n}\n\nif (!global.nativeCallSyncHook) {\n  Object.keys(_getConstants()).forEach(function (viewManagerName) {\n    if (!UIManagerProperties.includes(viewManagerName)) {\n      if (!viewManagerConfigs[viewManagerName]) {\n        viewManagerConfigs[viewManagerName] = _getConstants()[viewManagerName];\n      }\n\n      defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {\n        get: function get() {\n          console.warn(\"Accessing view manager configs directly off UIManager via UIManager['\" + viewManagerName + \"'] \" + (\"is no longer supported. Use UIManager.getViewManagerConfig('\" + viewManagerName + \"') instead.\"));\n          return UIManagerJS.getViewManagerConfig(viewManagerName);\n        }\n      });\n    }\n  });\n}\n\nmodule.exports = UIManagerJS;","map":{"version":3,"sources":["D:/MiCocina/MiCocina/node_modules/react-native/Libraries/ReactNative/PaperUIManager.js"],"names":["NativeModules","require","Platform","UIManagerProperties","defineLazyObjectProperty","viewManagerConfigs","triedLoadingConfig","Set","NativeUIManagerConstants","isNativeUIManagerConstantsSet","getConstants","NativeUIManager","getViewManagerConfig","viewManagerName","undefined","global","nativeCallSyncHook","getConstantsForViewManager","e","console","error","config","lazilyLoadView","has","result","add","viewConfig","lazifyViewManagerConfig","UIManagerJS","createView","reactTag","viewName","rootTag","props","OS","hasViewManagerConfig","Manager","get","viewManager","constants","Object","keys","forEach","key","value","commands","index","ViewManagerNames","includes","warn","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nconst NativeModules = require('../BatchedBridge/NativeModules');\nconst Platform = require('../Utilities/Platform');\nconst UIManagerProperties = require('./UIManagerProperties');\n\nconst defineLazyObjectProperty = require('../Utilities/defineLazyObjectProperty');\n\nimport NativeUIManager from './NativeUIManager';\nimport type {RootTag} from 'react-native/Libraries/Types/RootTagTypes';\n\nconst viewManagerConfigs = {};\n\nconst triedLoadingConfig = new Set();\n\nlet NativeUIManagerConstants = {};\nlet isNativeUIManagerConstantsSet = false;\nfunction getConstants(): Object {\n  if (!isNativeUIManagerConstantsSet) {\n    NativeUIManagerConstants = NativeUIManager.getConstants();\n    isNativeUIManagerConstantsSet = true;\n  }\n  return NativeUIManagerConstants;\n}\n\nfunction getViewManagerConfig(viewManagerName: string): any {\n  if (\n    viewManagerConfigs[viewManagerName] === undefined &&\n    global.nativeCallSyncHook && // If we're in the Chrome Debugger, let's not even try calling the sync method\n    NativeUIManager.getConstantsForViewManager\n  ) {\n    try {\n      viewManagerConfigs[\n        viewManagerName\n      ] = NativeUIManager.getConstantsForViewManager(viewManagerName);\n    } catch (e) {\n      console.error(\n        \"NativeUIManager.getConstantsForViewManager('\" +\n          viewManagerName +\n          \"') threw an exception.\",\n        e,\n      );\n      viewManagerConfigs[viewManagerName] = null;\n    }\n  }\n\n  const config = viewManagerConfigs[viewManagerName];\n  if (config) {\n    return config;\n  }\n\n  // If we're in the Chrome Debugger, let's not even try calling the sync\n  // method.\n  if (!global.nativeCallSyncHook) {\n    return config;\n  }\n\n  if (\n    NativeUIManager.lazilyLoadView &&\n    !triedLoadingConfig.has(viewManagerName)\n  ) {\n    const result = NativeUIManager.lazilyLoadView(viewManagerName);\n    triedLoadingConfig.add(viewManagerName);\n    if (result != null && result.viewConfig != null) {\n      getConstants()[viewManagerName] = result.viewConfig;\n      lazifyViewManagerConfig(viewManagerName);\n    }\n  }\n\n  return viewManagerConfigs[viewManagerName];\n}\n\n/* $FlowFixMe[cannot-spread-interface] (>=0.123.0 site=react_native_fb) This\n * comment suppresses an error found when Flow v0.123.0 was deployed. To see\n * the error, delete this comment and run Flow. */\nconst UIManagerJS = {\n  ...NativeUIManager,\n  createView(\n    reactTag: ?number,\n    viewName: string,\n    rootTag: RootTag,\n    props: Object,\n  ): void {\n    if (Platform.OS === 'ios' && viewManagerConfigs[viewName] === undefined) {\n      // This is necessary to force the initialization of native viewManager\n      // classes in iOS when using static ViewConfigs\n      getViewManagerConfig(viewName);\n    }\n\n    NativeUIManager.createView(reactTag, viewName, rootTag, props);\n  },\n  getConstants(): Object {\n    return getConstants();\n  },\n  getViewManagerConfig(viewManagerName: string): any {\n    return getViewManagerConfig(viewManagerName);\n  },\n  hasViewManagerConfig(viewManagerName: string): boolean {\n    return getViewManagerConfig(viewManagerName) != null;\n  },\n};\n\n// TODO (T45220498): Remove this.\n// 3rd party libs may be calling `NativeModules.UIManager.getViewManagerConfig()`\n// instead of `UIManager.getViewManagerConfig()` off UIManager.js.\n// This is a workaround for now.\n// $FlowFixMe[prop-missing]\nNativeUIManager.getViewManagerConfig = UIManagerJS.getViewManagerConfig;\n\nfunction lazifyViewManagerConfig(viewName) {\n  const viewConfig = getConstants()[viewName];\n  viewManagerConfigs[viewName] = viewConfig;\n  if (viewConfig.Manager) {\n    defineLazyObjectProperty(viewConfig, 'Constants', {\n      get: () => {\n        const viewManager = NativeModules[viewConfig.Manager];\n        const constants = {};\n        viewManager &&\n          Object.keys(viewManager).forEach(key => {\n            const value = viewManager[key];\n            if (typeof value !== 'function') {\n              constants[key] = value;\n            }\n          });\n        return constants;\n      },\n    });\n    defineLazyObjectProperty(viewConfig, 'Commands', {\n      get: () => {\n        const viewManager = NativeModules[viewConfig.Manager];\n        const commands = {};\n        let index = 0;\n        viewManager &&\n          Object.keys(viewManager).forEach(key => {\n            const value = viewManager[key];\n            if (typeof value === 'function') {\n              commands[key] = index++;\n            }\n          });\n        return commands;\n      },\n    });\n  }\n}\n\n/**\n * Copies the ViewManager constants and commands into UIManager. This is\n * only needed for iOS, which puts the constants in the ViewManager\n * namespace instead of UIManager, unlike Android.\n */\nif (Platform.OS === 'ios') {\n  Object.keys(getConstants()).forEach(viewName => {\n    lazifyViewManagerConfig(viewName);\n  });\n} else if (getConstants().ViewManagerNames) {\n  NativeUIManager.getConstants().ViewManagerNames.forEach(viewManagerName => {\n    defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n      get: () => NativeUIManager.getConstantsForViewManager(viewManagerName),\n    });\n  });\n}\n\nif (!global.nativeCallSyncHook) {\n  Object.keys(getConstants()).forEach(viewManagerName => {\n    if (!UIManagerProperties.includes(viewManagerName)) {\n      if (!viewManagerConfigs[viewManagerName]) {\n        viewManagerConfigs[viewManagerName] = getConstants()[viewManagerName];\n      }\n      defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n        get: () => {\n          console.warn(\n            `Accessing view manager configs directly off UIManager via UIManager['${viewManagerName}'] ` +\n              `is no longer supported. Use UIManager.getViewManagerConfig('${viewManagerName}') instead.`,\n          );\n\n          return UIManagerJS.getViewManagerConfig(viewManagerName);\n        },\n      });\n    }\n  });\n}\n\nmodule.exports = UIManagerJS;\n"]},"metadata":{},"sourceType":"script"}