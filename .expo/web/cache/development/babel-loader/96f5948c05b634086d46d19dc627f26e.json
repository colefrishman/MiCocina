{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = BottomTabBar;\nexports.getTabBarHeight = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _elements = require(\"@react-navigation/elements\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\n\nvar _BottomTabBarHeightCallbackContext = _interopRequireDefault(require(\"../utils/BottomTabBarHeightCallbackContext\"));\n\nvar _useIsKeyboardShown = _interopRequireDefault(require(\"../utils/useIsKeyboardShown\"));\n\nvar _BottomTabItem = _interopRequireDefault(require(\"./BottomTabItem\"));\n\nvar _excluded = [\"state\", \"descriptors\", \"dimensions\", \"insets\", \"style\"];\nvar DEFAULT_TABBAR_HEIGHT = 49;\nvar COMPACT_TABBAR_HEIGHT = 32;\nvar DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\nvar useNativeDriver = _reactNative.Platform.OS !== 'web';\n\nvar shouldUseHorizontalLabels = function shouldUseHorizontalLabels(_ref) {\n  var state = _ref.state,\n      descriptors = _ref.descriptors,\n      layout = _ref.layout,\n      dimensions = _ref.dimensions;\n  var tabBarLabelPosition = descriptors[state.routes[state.index].key].options.tabBarLabelPosition;\n\n  if (tabBarLabelPosition) {\n    switch (tabBarLabelPosition) {\n      case 'beside-icon':\n        return true;\n\n      case 'below-icon':\n        return false;\n    }\n  }\n\n  if (layout.width >= 768) {\n    var maxTabWidth = state.routes.reduce(function (acc, route) {\n      var tabBarItemStyle = descriptors[route.key].options.tabBarItemStyle;\n\n      var flattenedStyle = _reactNative.StyleSheet.flatten(tabBarItemStyle);\n\n      if (flattenedStyle) {\n        if (typeof flattenedStyle.width === 'number') {\n          return acc + flattenedStyle.width;\n        } else if (typeof flattenedStyle.maxWidth === 'number') {\n          return acc + flattenedStyle.maxWidth;\n        }\n      }\n\n      return acc + DEFAULT_MAX_TAB_ITEM_WIDTH;\n    }, 0);\n    return maxTabWidth <= layout.width;\n  } else {\n    return dimensions.width > dimensions.height;\n  }\n};\n\nvar getPaddingBottom = function getPaddingBottom(insets) {\n  return Math.max(insets.bottom - _reactNative.Platform.select({\n    ios: 4,\n    default: 0\n  }), 0);\n};\n\nvar getTabBarHeight = function getTabBarHeight(_ref2) {\n  var _StyleSheet$flatten;\n\n  var state = _ref2.state,\n      descriptors = _ref2.descriptors,\n      dimensions = _ref2.dimensions,\n      insets = _ref2.insets,\n      style = _ref2.style,\n      rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded);\n  var customHeight = (_StyleSheet$flatten = _reactNative.StyleSheet.flatten(style)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.height;\n\n  if (typeof customHeight === 'number') {\n    return customHeight;\n  }\n\n  var isLandscape = dimensions.width > dimensions.height;\n  var horizontalLabels = shouldUseHorizontalLabels((0, _extends2.default)({\n    state: state,\n    descriptors: descriptors,\n    dimensions: dimensions\n  }, rest));\n  var paddingBottom = getPaddingBottom(insets);\n\n  if (_reactNative.Platform.OS === 'ios' && !_reactNative.Platform.isPad && isLandscape && horizontalLabels) {\n    return COMPACT_TABBAR_HEIGHT + paddingBottom;\n  }\n\n  return DEFAULT_TABBAR_HEIGHT + paddingBottom;\n};\n\nexports.getTabBarHeight = getTabBarHeight;\n\nfunction BottomTabBar(_ref3) {\n  var state = _ref3.state,\n      navigation = _ref3.navigation,\n      descriptors = _ref3.descriptors,\n      insets = _ref3.insets,\n      style = _ref3.style;\n\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  var buildLink = (0, _native.useLinkBuilder)();\n  var focusedRoute = state.routes[state.index];\n  var focusedDescriptor = descriptors[focusedRoute.key];\n  var focusedOptions = focusedDescriptor.options;\n  var tabBarShowLabel = focusedOptions.tabBarShowLabel,\n      _focusedOptions$tabBa = focusedOptions.tabBarHideOnKeyboard,\n      tabBarHideOnKeyboard = _focusedOptions$tabBa === void 0 ? false : _focusedOptions$tabBa,\n      tabBarVisibilityAnimationConfig = focusedOptions.tabBarVisibilityAnimationConfig,\n      tabBarStyle = focusedOptions.tabBarStyle,\n      tabBarBackground = focusedOptions.tabBarBackground,\n      tabBarActiveTintColor = focusedOptions.tabBarActiveTintColor,\n      tabBarInactiveTintColor = focusedOptions.tabBarInactiveTintColor,\n      tabBarActiveBackgroundColor = focusedOptions.tabBarActiveBackgroundColor,\n      tabBarInactiveBackgroundColor = focusedOptions.tabBarInactiveBackgroundColor;\n  var dimensions = (0, _reactNativeSafeAreaContext.useSafeAreaFrame)();\n  var isKeyboardShown = (0, _useIsKeyboardShown.default)();\n\n  var onHeightChange = _react.default.useContext(_BottomTabBarHeightCallbackContext.default);\n\n  var shouldShowTabBar = !(tabBarHideOnKeyboard && isKeyboardShown);\n\n  var visibilityAnimationConfigRef = _react.default.useRef(tabBarVisibilityAnimationConfig);\n\n  _react.default.useEffect(function () {\n    visibilityAnimationConfigRef.current = tabBarVisibilityAnimationConfig;\n  });\n\n  var _React$useState = _react.default.useState(!shouldShowTabBar),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      isTabBarHidden = _React$useState2[0],\n      setIsTabBarHidden = _React$useState2[1];\n\n  var _React$useState3 = _react.default.useState(function () {\n    return new _reactNative.Animated.Value(shouldShowTabBar ? 1 : 0);\n  }),\n      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 1),\n      visible = _React$useState4[0];\n\n  _react.default.useEffect(function () {\n    var visibilityAnimationConfig = visibilityAnimationConfigRef.current;\n\n    if (shouldShowTabBar) {\n      var _visibilityAnimationC, _visibilityAnimationC2;\n\n      var animation = (visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC = visibilityAnimationConfig.show) === null || _visibilityAnimationC === void 0 ? void 0 : _visibilityAnimationC.animation) === 'spring' ? _reactNative.Animated.spring : _reactNative.Animated.timing;\n      animation(visible, (0, _extends2.default)({\n        toValue: 1,\n        useNativeDriver: useNativeDriver,\n        duration: 250\n      }, visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC2 = visibilityAnimationConfig.show) === null || _visibilityAnimationC2 === void 0 ? void 0 : _visibilityAnimationC2.config)).start(function (_ref4) {\n        var finished = _ref4.finished;\n\n        if (finished) {\n          setIsTabBarHidden(false);\n        }\n      });\n    } else {\n      var _visibilityAnimationC3, _visibilityAnimationC4;\n\n      setIsTabBarHidden(true);\n\n      var _animation = (visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC3 = visibilityAnimationConfig.hide) === null || _visibilityAnimationC3 === void 0 ? void 0 : _visibilityAnimationC3.animation) === 'spring' ? _reactNative.Animated.spring : _reactNative.Animated.timing;\n\n      _animation(visible, (0, _extends2.default)({\n        toValue: 0,\n        useNativeDriver: useNativeDriver,\n        duration: 200\n      }, visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC4 = visibilityAnimationConfig.hide) === null || _visibilityAnimationC4 === void 0 ? void 0 : _visibilityAnimationC4.config)).start();\n    }\n\n    return function () {\n      return visible.stopAnimation();\n    };\n  }, [visible, shouldShowTabBar]);\n\n  var _React$useState5 = _react.default.useState({\n    height: 0,\n    width: dimensions.width\n  }),\n      _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),\n      layout = _React$useState6[0],\n      setLayout = _React$useState6[1];\n\n  var handleLayout = function handleLayout(e) {\n    var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n    onHeightChange === null || onHeightChange === void 0 ? void 0 : onHeightChange(height);\n    setLayout(function (layout) {\n      if (height === layout.height && width === layout.width) {\n        return layout;\n      } else {\n        return {\n          height: height,\n          width: width\n        };\n      }\n    });\n  };\n\n  var routes = state.routes;\n  var paddingBottom = getPaddingBottom(insets);\n  var tabBarHeight = getTabBarHeight({\n    state: state,\n    descriptors: descriptors,\n    insets: insets,\n    dimensions: dimensions,\n    layout: layout,\n    style: [tabBarStyle, style]\n  });\n  var hasHorizontalLabels = shouldUseHorizontalLabels({\n    state: state,\n    descriptors: descriptors,\n    dimensions: dimensions,\n    layout: layout\n  });\n  var tabBarBackgroundElement = tabBarBackground === null || tabBarBackground === void 0 ? void 0 : tabBarBackground();\n  return _react.default.createElement(_reactNative.Animated.View, {\n    style: [styles.tabBar, {\n      backgroundColor: tabBarBackgroundElement != null ? 'transparent' : colors.card,\n      borderTopColor: colors.border\n    }, {\n      transform: [{\n        translateY: visible.interpolate({\n          inputRange: [0, 1],\n          outputRange: [layout.height + paddingBottom + _reactNative.StyleSheet.hairlineWidth, 0]\n        })\n      }],\n      position: isTabBarHidden ? 'absolute' : null\n    }, {\n      height: tabBarHeight,\n      paddingBottom: paddingBottom,\n      paddingHorizontal: Math.max(insets.left, insets.right)\n    }, tabBarStyle],\n    pointerEvents: isTabBarHidden ? 'none' : 'auto',\n    onLayout: handleLayout\n  }, _react.default.createElement(_reactNative.View, {\n    pointerEvents: \"none\",\n    style: _reactNative.StyleSheet.absoluteFill\n  }, tabBarBackgroundElement), _react.default.createElement(_reactNative.View, {\n    accessibilityRole: \"tablist\",\n    style: styles.content\n  }, routes.map(function (route, index) {\n    var _options$tabBarIcon;\n\n    var focused = index === state.index;\n    var options = descriptors[route.key].options;\n\n    var onPress = function onPress() {\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n\n      if (!focused && !event.defaultPrevented) {\n        navigation.dispatch((0, _extends2.default)({}, _native.CommonActions.navigate({\n          name: route.name,\n          merge: true\n        }), {\n          target: state.key\n        }));\n      }\n    };\n\n    var onLongPress = function onLongPress() {\n      navigation.emit({\n        type: 'tabLongPress',\n        target: route.key\n      });\n    };\n\n    var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n    var accessibilityLabel = options.tabBarAccessibilityLabel !== undefined ? options.tabBarAccessibilityLabel : typeof label === 'string' && _reactNative.Platform.OS === 'ios' ? label + \", tab, \" + (index + 1) + \" of \" + routes.length : undefined;\n    return _react.default.createElement(_native.NavigationContext.Provider, {\n      key: route.key,\n      value: descriptors[route.key].navigation\n    }, _react.default.createElement(_native.NavigationRouteContext.Provider, {\n      value: route\n    }, _react.default.createElement(_BottomTabItem.default, {\n      route: route,\n      focused: focused,\n      horizontal: hasHorizontalLabels,\n      onPress: onPress,\n      onLongPress: onLongPress,\n      accessibilityLabel: accessibilityLabel,\n      to: buildLink(route.name, route.params),\n      testID: options.tabBarTestID,\n      allowFontScaling: options.tabBarAllowFontScaling,\n      activeTintColor: tabBarActiveTintColor,\n      inactiveTintColor: tabBarInactiveTintColor,\n      activeBackgroundColor: tabBarActiveBackgroundColor,\n      inactiveBackgroundColor: tabBarInactiveBackgroundColor,\n      button: options.tabBarButton,\n      icon: (_options$tabBarIcon = options.tabBarIcon) !== null && _options$tabBarIcon !== void 0 ? _options$tabBarIcon : function (_ref5) {\n        var color = _ref5.color,\n            size = _ref5.size;\n        return _react.default.createElement(_elements.MissingIcon, {\n          color: color,\n          size: size\n        });\n      },\n      badge: options.tabBarBadge,\n      badgeStyle: options.tabBarBadgeStyle,\n      label: label,\n      showLabel: tabBarShowLabel,\n      labelStyle: options.tabBarLabelStyle,\n      iconStyle: options.tabBarIconStyle,\n      style: options.tabBarItemStyle\n    })));\n  })));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderTopWidth: _reactNative.StyleSheet.hairlineWidth,\n    elevation: 8\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row'\n  }\n});","map":{"version":3,"sources":["BottomTabBar.tsx"],"names":["DEFAULT_TABBAR_HEIGHT","COMPACT_TABBAR_HEIGHT","DEFAULT_MAX_TAB_ITEM_WIDTH","useNativeDriver","Platform","shouldUseHorizontalLabels","dimensions","tabBarLabelPosition","descriptors","state","layout","maxTabWidth","tabBarItemStyle","route","flattenedStyle","StyleSheet","acc","getPaddingBottom","insets","ios","default","getTabBarHeight","rest","customHeight","isLandscape","horizontalLabels","paddingBottom","style","colors","buildLink","focusedRoute","focusedDescriptor","focusedOptions","tabBarHideOnKeyboard","tabBarInactiveBackgroundColor","isKeyboardShown","onHeightChange","React","shouldShowTabBar","visibilityAnimationConfigRef","Animated","visibilityAnimationConfig","animation","toValue","duration","finished","setIsTabBarHidden","visible","height","width","handleLayout","e","setLayout","routes","tabBarHeight","hasHorizontalLabels","tabBarBackgroundElement","tabBarBackground","styles","backgroundColor","borderTopColor","border","transform","translateY","inputRange","outputRange","position","isTabBarHidden","paddingHorizontal","Math","absoluteFill","content","focused","index","options","onPress","event","type","target","canPreventDefault","navigation","name","merge","key","onLongPress","label","accessibilityLabel","size","tabBar","left","right","bottom","borderTopWidth","elevation","flex","flexDirection"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AASA;;AACA;;AASA;;AAGA;;AACA;;AACA;;;AAMA,IAAMA,qBAAqB,GAA3B,EAAA;AACA,IAAMC,qBAAqB,GAA3B,EAAA;AACA,IAAMC,0BAA0B,GAAhC,GAAA;AAEA,IAAMC,eAAe,GAAGC,sBAAAA,EAAAA,KAAxB,KAAA;;AASA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAA,IAAA,EAKnB;AALoB,MAAA,KAAA,GAKpB,IALoB,CAAA,KAAA;AAAA,MAAA,WAAA,GAKpB,IALoB,CAAA,WAAA;AAAA,MAAA,MAAA,GAKpB,IALoB,CAAA,MAAA;AAAA,MAIjCC,UAJiC,GAKpB,IALoB,CAIjCA,UAJiC;AAMjC,MAAQC,mBAAR,GACEC,WAAW,CAACC,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAlBA,KAAAA,EAAZD,GAAW,CAAXA,CADF,OAAA,CAAQD,mBAAR;;AAGA,MAAA,mBAAA,EAAyB;AACvB,YAAA,mBAAA;AACE,WAAA,aAAA;AACE,eAAA,IAAA;;AACF,WAAA,YAAA;AACE,eAAA,KAAA;AAJJ;AAMD;;AAED,MAAIG,MAAM,CAANA,KAAAA,IAAJ,GAAA,EAAyB;AAEvB,QAAMC,WAAW,GAAG,KAAK,CAAL,MAAA,CAAA,MAAA,CAAoB,UAAA,GAAA,EAAA,KAAA,EAAgB;AACtD,UAAQC,eAAR,GAA4BJ,WAAW,CAACK,KAAK,CAAjBL,GAAW,CAAXA,CAA5B,OAAA,CAAQI,eAAR;;AACA,UAAME,cAAc,GAAGC,wBAAAA,OAAAA,CAAvB,eAAuBA,CAAvB;;AAEA,UAAA,cAAA,EAAoB;AAClB,YAAI,OAAOD,cAAc,CAArB,KAAA,KAAJ,QAAA,EAA8C;AAC5C,iBAAOE,GAAG,GAAGF,cAAc,CAA3B,KAAA;AADF,SAAA,MAEO,IAAI,OAAOA,cAAc,CAArB,QAAA,KAAJ,QAAA,EAAiD;AACtD,iBAAOE,GAAG,GAAGF,cAAc,CAA3B,QAAA;AACD;AACF;;AAED,aAAOE,GAAG,GAAV,0BAAA;AAZkB,KAAA,EAApB,CAAoB,CAApB;AAeA,WAAOL,WAAW,IAAID,MAAM,CAA5B,KAAA;AAjBF,GAAA,MAkBO;AACL,WAAOJ,UAAU,CAAVA,KAAAA,GAAmBA,UAAU,CAApC,MAAA;AACD;AAtCH,CAAA;;AAyCA,IAAMW,gBAAgB,GAAIC,SAApBD,gBAAoBC,CAAAA,MAAD;AAAA,SACvB,IAAI,CAAJ,GAAA,CAASA,MAAM,CAANA,MAAAA,GAAgB,sBAAA,MAAA,CAAgB;AAAEC,IAAAA,GAAG,EAAL,CAAA;AAAUC,IAAAA,OAAO,EAAE;AAAnB,GAAhB,CAAzB,EADF,CACE,CADuB;AAAA,CAAzB;;AAGO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAA,KAAA,EAUzB;AAAA,MAAA,mBAAA;;AAV0B,MAAA,KAAA,GAU1B,KAV0B,CAAA,KAAA;AAAA,MAAA,WAAA,GAU1B,KAV0B,CAAA,WAAA;AAAA,MAAA,UAAA,GAU1B,KAV0B,CAAA,UAAA;AAAA,MAAA,MAAA,GAU1B,KAV0B,CAAA,MAAA;AAAA,MAAA,KAAA,GAU1B,KAV0B,CAAA,KAAA;AAAA,MAM3BC,IAN2B,0CAU1B,KAV0B;AAY9B,MAAMC,YAAY,GAAA,CAAA,mBAAA,GAAGR,wBAAAA,OAAAA,CAAH,KAAGA,CAAH,MAAA,IAAA,IAAA,mBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,mBAAAA,CAArB,MAAA;;AAEA,MAAI,OAAA,YAAA,KAAJ,QAAA,EAAsC;AACpC,WAAA,YAAA;AACD;;AAED,MAAMS,WAAW,GAAGlB,UAAU,CAAVA,KAAAA,GAAmBA,UAAU,CAAjD,MAAA;AACA,MAAMmB,gBAAgB,GAAGpB,yBAAyB;AAChDI,IAAAA,KADiD,EACjDA,KADgD;AAEhDD,IAAAA,WAFiD,EAEjDA,WAFgD;AAGhDF,IAAAA,UAHiD,EAGjDA;AAHgD,KAI7CgB,IAJ6C,EAAlD;AAMA,MAAMI,aAAa,GAAGT,gBAAgB,CAAtC,MAAsC,CAAtC;;AAEA,MACEb,sBAAAA,EAAAA,KAAAA,KAAAA,IACA,CAACA,sBADDA,KAAAA,IAAAA,WAAAA,IADF,gBAAA,EAKE;AACA,WAAOH,qBAAqB,GAA5B,aAAA;AACD;;AAED,SAAOD,qBAAqB,GAA5B,aAAA;AApCK,CAAA;;;;AAuCQ,SAAA,YAAA,CAAA,KAAA,EAML;AAN2B,MAAA,KAAA,GAM3B,KAN2B,CAAA,KAAA;AAAA,MAAA,UAAA,GAM3B,KAN2B,CAAA,UAAA;AAAA,MAAA,WAAA,GAM3B,KAN2B,CAAA,WAAA;AAAA,MAAA,MAAA,GAM3B,KAN2B,CAAA,MAAA;AAAA,MAKnC2B,KALmC,GAM3B,KAN2B,CAKnCA,KALmC;;AAOnC,kBAAA,uBAAA;AAAA,MAAQC,MAAR,aAAQA,MAAR;;AACA,MAAMC,SAAS,GAAf,6BAAA;AAEA,MAAMC,YAAY,GAAGrB,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAvC,KAAqBA,CAArB;AACA,MAAMsB,iBAAiB,GAAGvB,WAAW,CAACsB,YAAY,CAAlD,GAAqC,CAArC;AACA,MAAME,cAAc,GAAGD,iBAAiB,CAAxC,OAAA;AAEA,MAAM,eAAN,GAAA,cAAA,CAAM,eAAN;AAAA,8BAAA,cAAA,CAEEE,oBAFF;AAAA,MAEEA,oBAFF,sCAAM,KAAN;AAAA,MAAM,+BAAN,GAAA,cAAA,CAAM,+BAAN;AAAA,MAAM,WAAN,GAAA,cAAA,CAAM,WAAN;AAAA,MAAM,gBAAN,GAAA,cAAA,CAAM,gBAAN;AAAA,MAAM,qBAAN,GAAA,cAAA,CAAM,qBAAN;AAAA,MAAM,uBAAN,GAAA,cAAA,CAAM,uBAAN;AAAA,MAAM,2BAAN,GAAA,cAAA,CAAM,2BAAN;AAAA,MASEC,6BATF,GAAA,cAAA,CASEA,6BATF;AAYA,MAAM5B,UAAU,GAAhB,mDAAA;AACA,MAAM6B,eAAe,GAArB,kCAAA;;AAEA,MAAMC,cAAc,GAAGC,eAAAA,UAAAA,CAAvB,0CAAuBA,CAAvB;;AAEA,MAAMC,gBAAgB,GAAG,EAAEL,oBAAoB,IAA/C,eAAyB,CAAzB;;AAEA,MAAMM,4BAA4B,GAAGF,eAAAA,MAAAA,CAArC,+BAAqCA,CAArC;;AAIAA,iBAAAA,SAAAA,CAAgB,YAAM;AACpBE,IAAAA,4BAA4B,CAA5BA,OAAAA,GAAAA,+BAAAA;AADFF,GAAAA;;AAIA,wBAA4CA,eAAAA,QAAAA,CAAe,CAA3D,gBAA4CA,CAA5C;AAAA;AAAA,MAAM,cAAN;AAAA,MAAM,iBAAN;;AAEA,yBAAkBA,eAAAA,QAAAA,CAChB;AAAA,WAAM,IAAIG,sBAAJ,KAAA,CAAmBF,gBAAgB,GAAA,CAAA,GAD3C,CACQ,CAAN;AAAA,GADgBD,CAAlB;AAAA;AAAA,MAAM,OAAN;;AAIAA,iBAAAA,SAAAA,CAAgB,YAAM;AACpB,QAAMI,yBAAyB,GAAGF,4BAA4B,CAA9D,OAAA;;AAEA,QAAA,gBAAA,EAAsB;AAAA,UAAA,qBAAA,EAAA,sBAAA;;AACpB,UAAMG,SAAS,GACb,CAAA,yBAAyB,KAAzB,IAAA,IAAA,yBAAyB,KAAA,KAAzB,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,qBAAA,GAAA,yBAAyB,CAAzB,IAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,SAAA,MAAA,QAAA,GACIF,sBADJ,MAAA,GAEIA,sBAHN,MAAA;AAKAE,MAAAA,SAAS,CAAA,OAAA;AACPC,QAAAA,OAAO,EADU,CAAV;AAEPxC,QAAAA,eAFiB,EAEjBA,eAFO;AAGPyC,QAAAA,QAAQ,EAHS;AAAV,SAIJH,yBAAH,KAAA,IAAGA,IAAAA,yBAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAH,CAAA,sBAAA,GAAGA,yBAAyB,CAA5B,IAAA,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,sBAAAA,CAAH,MAJO,EAATC,CAAAA,KAAAA,CAKS,UAAA,KAAA,EAAkB;AAAjB,YAAEG,QAAF,GAAiB,KAAjB,CAAEA,QAAF;;AACR,YAAA,QAAA,EAAc;AACZC,UAAAA,iBAAiB,CAAjBA,KAAiB,CAAjBA;AACD;AARHJ,OAAAA;AANF,KAAA,MAgBO;AAAA,UAAA,sBAAA,EAAA,sBAAA;;AACLI,MAAAA,iBAAiB,CAAjBA,IAAiB,CAAjBA;;AAEA,UAAMJ,UAAS,GACb,CAAA,yBAAyB,KAAzB,IAAA,IAAA,yBAAyB,KAAA,KAAzB,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,sBAAA,GAAA,yBAAyB,CAAzB,IAAA,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAAA,SAAA,MAAA,QAAA,GACIF,sBADJ,MAAA,GAEIA,sBAHN,MAAA;;AAKAE,MAAAA,UAAS,CAAA,OAAA;AACPC,QAAAA,OAAO,EADU,CAAV;AAEPxC,QAAAA,eAFiB,EAEjBA,eAFO;AAGPyC,QAAAA,QAAQ,EAHS;AAAV,SAIJH,yBAAH,KAAA,IAAGA,IAAAA,yBAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAH,CAAA,sBAAA,GAAGA,yBAAyB,CAA5B,IAAA,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,sBAAAA,CAAH,MAJO,EAATC,CAAAA,KAAAA;AAMD;;AAED,WAAO;AAAA,aAAMK,OAAO,CAApB,aAAaA,EAAN;AAAA,KAAP;AAnCFV,GAAAA,EAoCG,CAAA,OAAA,EApCHA,gBAoCG,CApCHA;;AAsCA,yBAA4B,eAAA,QAAA,CAAe;AACzCW,IAAAA,MAAM,EADmC,CAAA;AAEzCC,IAAAA,KAAK,EAAE3C,UAAU,CAAC2C;AAFuB,GAAf,CAA5B;AAAA;AAAA,MAAM,MAAN;AAAA,MAAM,SAAN;;AAKA,MAAMC,YAAY,GAAIC,SAAhBD,YAAgBC,CAAAA,CAAD,EAA0B;AAC7C,gCAA0BA,CAAC,CAADA,WAAAA,CAA1B,MAAA;AAAA,QAAM,MAAN,yBAAM,MAAN;AAAA,QAAgBF,KAAhB,yBAAgBA,KAAhB;AAEAb,IAAAA,cAAc,KAAdA,IAAAA,IAAAA,cAAc,KAAA,KAAdA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,cAAc,CAAdA,MAAc,CAAdA;AAEAgB,IAAAA,SAAS,CAAE1C,UAAAA,MAAD,EAAY;AACpB,UAAIsC,MAAM,KAAKtC,MAAM,CAAjBsC,MAAAA,IAA4BC,KAAK,KAAKvC,MAAM,CAAhD,KAAA,EAAwD;AACtD,eAAA,MAAA;AADF,OAAA,MAEO;AACL,eAAO;AACLsC,UAAAA,MADK,EACLA,MADK;AAELC,UAAAA,KAAAA,EAAAA;AAFK,SAAP;AAID;AARHG,KAAS,CAATA;AALF,GAAA;;AAiBA,MAAQC,MAAR,GAAA,KAAA,CAAQA,MAAR;AAEA,MAAM3B,aAAa,GAAGT,gBAAgB,CAAtC,MAAsC,CAAtC;AACA,MAAMqC,YAAY,GAAGjC,eAAe,CAAC;AACnCZ,IAAAA,KADmC,EACnCA,KADmC;AAEnCD,IAAAA,WAFmC,EAEnCA,WAFmC;AAGnCU,IAAAA,MAHmC,EAGnCA,MAHmC;AAInCZ,IAAAA,UAJmC,EAInCA,UAJmC;AAKnCI,IAAAA,MALmC,EAKnCA,MALmC;AAMnCiB,IAAAA,KAAK,EAAE,CAAA,WAAA,EAAA,KAAA;AAN4B,GAAD,CAApC;AASA,MAAM4B,mBAAmB,GAAGlD,yBAAyB,CAAC;AACpDI,IAAAA,KADoD,EACpDA,KADoD;AAEpDD,IAAAA,WAFoD,EAEpDA,WAFoD;AAGpDF,IAAAA,UAHoD,EAGpDA,UAHoD;AAIpDI,IAAAA,MAAAA,EAAAA;AAJoD,GAAD,CAArD;AAOA,MAAM8C,uBAAuB,GAAGC,gBAAH,KAAA,IAAGA,IAAAA,gBAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,gBAAhC,EAAA;AAEA,SACE,eAAA,aAAA,CAAA,sBAAA,IAAA,EAAA;AACE,IAAA,KAAK,EAAE,CACLC,MAAM,CADD,MAAA,EAEL;AACEC,MAAAA,eAAe,EACbH,uBAAuB,IAAvBA,IAAAA,GAAAA,aAAAA,GAAkD5B,MAAM,CAF5D,IAAA;AAGEgC,MAAAA,cAAc,EAAEhC,MAAM,CAACiC;AAHzB,KAFK,EAOL;AACEC,MAAAA,SAAS,EAAE,CACT;AACEC,QAAAA,UAAU,EAAE,OAAO,CAAP,WAAA,CAAoB;AAC9BC,UAAAA,UAAU,EAAE,CAAA,CAAA,EADkB,CAClB,CADkB;AAE9BC,UAAAA,WAAW,EAAE,CACXvD,MAAM,CAANA,MAAAA,GAAAA,aAAAA,GAAgCK,wBADrB,aAAA,EAAA,CAAA;AAFiB,SAApB;AADd,OADS,CADb;AAcEmD,MAAAA,QAAQ,EAAEC,cAAc,GAAA,UAAA,GAAiB;AAd3C,KAPK,EAuBL;AACEnB,MAAAA,MAAM,EADR,YAAA;AAEEtB,MAAAA,aAFF,EAEEA,aAFF;AAGE0C,MAAAA,iBAAiB,EAAEC,IAAI,CAAJA,GAAAA,CAASnD,MAAM,CAAfmD,IAAAA,EAAsBnD,MAAM,CAA5BmD,KAAAA;AAHrB,KAvBK,EADT,WACS,CADT;AA+BE,IAAA,aAAa,EAAEF,cAAc,GAAA,MAAA,GA/B/B,MAAA;AAgCE,IAAA,QAAQ,EAAEjB;AAhCZ,GAAA,EAkCE,eAAA,aAAA,CAAA,iBAAA,EAAA;AAAM,IAAA,aAAa,EAAnB,MAAA;AAA2B,IAAA,KAAK,EAAEnC,wBAAWuD;AAA7C,GAAA,EAlCF,uBAkCE,CAlCF,EAqCE,eAAA,aAAA,CAAA,iBAAA,EAAA;AAAM,IAAA,iBAAiB,EAAvB,SAAA;AAAkC,IAAA,KAAK,EAAEZ,MAAM,CAACa;AAAhD,GAAA,EACG,MAAM,CAAN,GAAA,CAAW,UAAA,KAAA,EAAA,KAAA,EAAkB;AAAA,QAAA,mBAAA;;AAC5B,QAAMC,OAAO,GAAGC,KAAK,KAAKhE,KAAK,CAA/B,KAAA;AACA,QAAQiE,OAAR,GAAoBlE,WAAW,CAACK,KAAK,CAArC,GAA+B,CAA/B,CAAQ6D,OAAR;;AAEA,QAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,UAAMC,KAAK,GAAG,UAAU,CAAV,IAAA,CAAgB;AAC5BC,QAAAA,IAAI,EADwB,UAAA;AAE5BC,QAAAA,MAAM,EAAEjE,KAAK,CAFe,GAAA;AAG5BkE,QAAAA,iBAAiB,EAAE;AAHS,OAAhB,CAAd;;AAMA,UAAI,CAAA,OAAA,IAAY,CAACH,KAAK,CAAtB,gBAAA,EAAyC;AACvCI,QAAAA,UAAU,CAAVA,QAAAA,4BACK,sBAAA,QAAA,CAAuB;AAAEC,UAAAA,IAAI,EAAEpE,KAAK,CAAb,IAAA;AAAoBqE,UAAAA,KAAK,EAAE;AAA3B,SAAvB,CADLF;AAEEF,UAAAA,MAAM,EAAErE,KAAK,CAAC0E;AAFhBH;AAID;AAZH,KAAA;;AAeA,QAAMI,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBJ,MAAAA,UAAU,CAAVA,IAAAA,CAAgB;AACdH,QAAAA,IAAI,EADU,cAAA;AAEdC,QAAAA,MAAM,EAAEjE,KAAK,CAACsE;AAFA,OAAhBH;AADF,KAAA;;AAOA,QAAMK,KAAK,GACTX,OAAO,CAAPA,WAAAA,KAAAA,SAAAA,GACIA,OAAO,CADXA,WAAAA,GAEIA,OAAO,CAAPA,KAAAA,KAAAA,SAAAA,GACAA,OAAO,CADPA,KAAAA,GAEA7D,KAAK,CALX,IAAA;AAOA,QAAMyE,kBAAkB,GACtBZ,OAAO,CAAPA,wBAAAA,KAAAA,SAAAA,GACIA,OAAO,CADXA,wBAAAA,GAEI,OAAA,KAAA,KAAA,QAAA,IAA6BtE,sBAAAA,EAAAA,KAA7B,KAAA,GACGiF,KADH,gBACkBZ,KAAK,GAAG,CAD1B,aACkCpB,MAAM,CADxC,MAAA,GAHN,SAAA;AAOA,WACE,eAAA,aAAA,CAAA,0BAAA,QAAA,EAAA;AACE,MAAA,GAAG,EAAExC,KAAK,CADZ,GAAA;AAEE,MAAA,KAAK,EAAEL,WAAW,CAACK,KAAK,CAAjBL,GAAW,CAAXA,CAAuBwE;AAFhC,KAAA,EAIE,eAAA,aAAA,CAAA,+BAAA,QAAA,EAAA;AAAiC,MAAA,KAAK,EAAEnE;AAAxC,KAAA,EACE,eAAA,aAAA,CAAA,sBAAA,EAAA;AACE,MAAA,KAAK,EADP,KAAA;AAEE,MAAA,OAAO,EAFT,OAAA;AAGE,MAAA,UAAU,EAHZ,mBAAA;AAIE,MAAA,OAAO,EAJT,OAAA;AAKE,MAAA,WAAW,EALb,WAAA;AAME,MAAA,kBAAkB,EANpB,kBAAA;AAOE,MAAA,EAAE,EAAEgB,SAAS,CAAChB,KAAK,CAAN,IAAA,EAAaA,KAAK,CAPjC,MAOe,CAPf;AAQE,MAAA,MAAM,EAAE6D,OAAO,CARjB,YAAA;AASE,MAAA,gBAAgB,EAAEA,OAAO,CAT3B,sBAAA;AAUE,MAAA,eAAe,EAVjB,qBAAA;AAWE,MAAA,iBAAiB,EAXnB,uBAAA;AAYE,MAAA,qBAAqB,EAZvB,2BAAA;AAaE,MAAA,uBAAuB,EAbzB,6BAAA;AAcE,MAAA,MAAM,EAAEA,OAAO,CAdjB,YAAA;AAeE,MAAA,IAAI,EAAA,CAAA,mBAAA,GACFA,OAAO,CADL,UAAA,MAAA,IAAA,IAAA,mBAAA,KAAA,KAAA,CAAA,GAAA,mBAAA,GAED,UAAA,KAAA,EAAA;AAAA,YAAC,KAAD,GAAA,KAAA,CAAC,KAAD;AAAA,YAAUa,IAAV,GAAA,KAAA,CAAUA,IAAV;AAAA,eACC,eAAA,aAAA,CAAA,qBAAA,EAAA;AAAa,UAAA,KAAK,EAAlB,KAAA;AAA2B,UAAA,IAAI,EAAEA;AAAjC,SAAA,CADD;AAjBL,OAAA;AAqBE,MAAA,KAAK,EAAEb,OAAO,CArBhB,WAAA;AAsBE,MAAA,UAAU,EAAEA,OAAO,CAtBrB,gBAAA;AAuBE,MAAA,KAAK,EAvBP,KAAA;AAwBE,MAAA,SAAS,EAxBX,eAAA;AAyBE,MAAA,UAAU,EAAEA,OAAO,CAzBrB,gBAAA;AA0BE,MAAA,SAAS,EAAEA,OAAO,CA1BpB,eAAA;AA2BE,MAAA,KAAK,EAAEA,OAAO,CAAC9D;AA3BjB,KAAA,CADF,CAJF,CADF;AA/ER,GAuCO,CADH,CArCF,CADF;AAyHD;;AAED,IAAM8C,MAAM,GAAG,wBAAA,MAAA,CAAkB;AAC/B8B,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EADE,CAAA;AAENC,IAAAA,KAAK,EAFC,CAAA;AAGNC,IAAAA,MAAM,EAHA,CAAA;AAINC,IAAAA,cAAc,EAAE7E,wBAJV,aAAA;AAKN8E,IAAAA,SAAS,EAAE;AALL,GADuB;AAQ/BtB,EAAAA,OAAO,EAAE;AACPuB,IAAAA,IAAI,EADG,CAAA;AAEPC,IAAAA,aAAa,EAAE;AAFR;AARsB,CAAlB,CAAf","sourcesContent":["import { MissingIcon } from '@react-navigation/elements';\nimport {\n  CommonActions,\n  NavigationContext,\n  NavigationRouteContext,\n  ParamListBase,\n  TabNavigationState,\n  useLinkBuilder,\n  useTheme,\n} from '@react-navigation/native';\nimport React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport { EdgeInsets, useSafeAreaFrame } from 'react-native-safe-area-context';\n\nimport type { BottomTabBarProps, BottomTabDescriptorMap } from '../types';\nimport BottomTabBarHeightCallbackContext from '../utils/BottomTabBarHeightCallbackContext';\nimport useIsKeyboardShown from '../utils/useIsKeyboardShown';\nimport BottomTabItem from './BottomTabItem';\n\ntype Props = BottomTabBarProps & {\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n};\n\nconst DEFAULT_TABBAR_HEIGHT = 49;\nconst COMPACT_TABBAR_HEIGHT = 32;\nconst DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\ntype Options = {\n  state: TabNavigationState<ParamListBase>;\n  descriptors: BottomTabDescriptorMap;\n  layout: { height: number; width: number };\n  dimensions: { height: number; width: number };\n};\n\nconst shouldUseHorizontalLabels = ({\n  state,\n  descriptors,\n  layout,\n  dimensions,\n}: Options) => {\n  const { tabBarLabelPosition } =\n    descriptors[state.routes[state.index].key].options;\n\n  if (tabBarLabelPosition) {\n    switch (tabBarLabelPosition) {\n      case 'beside-icon':\n        return true;\n      case 'below-icon':\n        return false;\n    }\n  }\n\n  if (layout.width >= 768) {\n    // Screen size matches a tablet\n    const maxTabWidth = state.routes.reduce((acc, route) => {\n      const { tabBarItemStyle } = descriptors[route.key].options;\n      const flattenedStyle = StyleSheet.flatten(tabBarItemStyle);\n\n      if (flattenedStyle) {\n        if (typeof flattenedStyle.width === 'number') {\n          return acc + flattenedStyle.width;\n        } else if (typeof flattenedStyle.maxWidth === 'number') {\n          return acc + flattenedStyle.maxWidth;\n        }\n      }\n\n      return acc + DEFAULT_MAX_TAB_ITEM_WIDTH;\n    }, 0);\n\n    return maxTabWidth <= layout.width;\n  } else {\n    return dimensions.width > dimensions.height;\n  }\n};\n\nconst getPaddingBottom = (insets: EdgeInsets) =>\n  Math.max(insets.bottom - Platform.select({ ios: 4, default: 0 }), 0);\n\nexport const getTabBarHeight = ({\n  state,\n  descriptors,\n  dimensions,\n  insets,\n  style,\n  ...rest\n}: Options & {\n  insets: EdgeInsets;\n  style: Animated.WithAnimatedValue<StyleProp<ViewStyle>> | undefined;\n}) => {\n  // @ts-ignore\n  const customHeight = StyleSheet.flatten(style)?.height;\n\n  if (typeof customHeight === 'number') {\n    return customHeight;\n  }\n\n  const isLandscape = dimensions.width > dimensions.height;\n  const horizontalLabels = shouldUseHorizontalLabels({\n    state,\n    descriptors,\n    dimensions,\n    ...rest,\n  });\n  const paddingBottom = getPaddingBottom(insets);\n\n  if (\n    Platform.OS === 'ios' &&\n    !Platform.isPad &&\n    isLandscape &&\n    horizontalLabels\n  ) {\n    return COMPACT_TABBAR_HEIGHT + paddingBottom;\n  }\n\n  return DEFAULT_TABBAR_HEIGHT + paddingBottom;\n};\n\nexport default function BottomTabBar({\n  state,\n  navigation,\n  descriptors,\n  insets,\n  style,\n}: Props) {\n  const { colors } = useTheme();\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const {\n    tabBarShowLabel,\n    tabBarHideOnKeyboard = false,\n    tabBarVisibilityAnimationConfig,\n    tabBarStyle,\n    tabBarBackground,\n    tabBarActiveTintColor,\n    tabBarInactiveTintColor,\n    tabBarActiveBackgroundColor,\n    tabBarInactiveBackgroundColor,\n  } = focusedOptions;\n\n  const dimensions = useSafeAreaFrame();\n  const isKeyboardShown = useIsKeyboardShown();\n\n  const onHeightChange = React.useContext(BottomTabBarHeightCallbackContext);\n\n  const shouldShowTabBar = !(tabBarHideOnKeyboard && isKeyboardShown);\n\n  const visibilityAnimationConfigRef = React.useRef(\n    tabBarVisibilityAnimationConfig\n  );\n\n  React.useEffect(() => {\n    visibilityAnimationConfigRef.current = tabBarVisibilityAnimationConfig;\n  });\n\n  const [isTabBarHidden, setIsTabBarHidden] = React.useState(!shouldShowTabBar);\n\n  const [visible] = React.useState(\n    () => new Animated.Value(shouldShowTabBar ? 1 : 0)\n  );\n\n  React.useEffect(() => {\n    const visibilityAnimationConfig = visibilityAnimationConfigRef.current;\n\n    if (shouldShowTabBar) {\n      const animation =\n        visibilityAnimationConfig?.show?.animation === 'spring'\n          ? Animated.spring\n          : Animated.timing;\n\n      animation(visible, {\n        toValue: 1,\n        useNativeDriver,\n        duration: 250,\n        ...visibilityAnimationConfig?.show?.config,\n      }).start(({ finished }) => {\n        if (finished) {\n          setIsTabBarHidden(false);\n        }\n      });\n    } else {\n      setIsTabBarHidden(true);\n\n      const animation =\n        visibilityAnimationConfig?.hide?.animation === 'spring'\n          ? Animated.spring\n          : Animated.timing;\n\n      animation(visible, {\n        toValue: 0,\n        useNativeDriver,\n        duration: 200,\n        ...visibilityAnimationConfig?.hide?.config,\n      }).start();\n    }\n\n    return () => visible.stopAnimation();\n  }, [visible, shouldShowTabBar]);\n\n  const [layout, setLayout] = React.useState({\n    height: 0,\n    width: dimensions.width,\n  });\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    onHeightChange?.(height);\n\n    setLayout((layout) => {\n      if (height === layout.height && width === layout.width) {\n        return layout;\n      } else {\n        return {\n          height,\n          width,\n        };\n      }\n    });\n  };\n\n  const { routes } = state;\n\n  const paddingBottom = getPaddingBottom(insets);\n  const tabBarHeight = getTabBarHeight({\n    state,\n    descriptors,\n    insets,\n    dimensions,\n    layout,\n    style: [tabBarStyle, style],\n  });\n\n  const hasHorizontalLabels = shouldUseHorizontalLabels({\n    state,\n    descriptors,\n    dimensions,\n    layout,\n  });\n\n  const tabBarBackgroundElement = tabBarBackground?.();\n\n  return (\n    <Animated.View\n      style={[\n        styles.tabBar,\n        {\n          backgroundColor:\n            tabBarBackgroundElement != null ? 'transparent' : colors.card,\n          borderTopColor: colors.border,\n        },\n        {\n          transform: [\n            {\n              translateY: visible.interpolate({\n                inputRange: [0, 1],\n                outputRange: [\n                  layout.height + paddingBottom + StyleSheet.hairlineWidth,\n                  0,\n                ],\n              }),\n            },\n          ],\n          // Absolutely position the tab bar so that the content is below it\n          // This is needed to avoid gap at bottom when the tab bar is hidden\n          position: isTabBarHidden ? 'absolute' : (null as any),\n        },\n        {\n          height: tabBarHeight,\n          paddingBottom,\n          paddingHorizontal: Math.max(insets.left, insets.right),\n        },\n        tabBarStyle,\n      ]}\n      pointerEvents={isTabBarHidden ? 'none' : 'auto'}\n      onLayout={handleLayout}\n    >\n      <View pointerEvents=\"none\" style={StyleSheet.absoluteFill}>\n        {tabBarBackgroundElement}\n      </View>\n      <View accessibilityRole=\"tablist\" style={styles.content}>\n        {routes.map((route, index) => {\n          const focused = index === state.index;\n          const { options } = descriptors[route.key];\n\n          const onPress = () => {\n            const event = navigation.emit({\n              type: 'tabPress',\n              target: route.key,\n              canPreventDefault: true,\n            });\n\n            if (!focused && !event.defaultPrevented) {\n              navigation.dispatch({\n                ...CommonActions.navigate({ name: route.name, merge: true }),\n                target: state.key,\n              });\n            }\n          };\n\n          const onLongPress = () => {\n            navigation.emit({\n              type: 'tabLongPress',\n              target: route.key,\n            });\n          };\n\n          const label =\n            options.tabBarLabel !== undefined\n              ? options.tabBarLabel\n              : options.title !== undefined\n              ? options.title\n              : route.name;\n\n          const accessibilityLabel =\n            options.tabBarAccessibilityLabel !== undefined\n              ? options.tabBarAccessibilityLabel\n              : typeof label === 'string' && Platform.OS === 'ios'\n              ? `${label}, tab, ${index + 1} of ${routes.length}`\n              : undefined;\n\n          return (\n            <NavigationContext.Provider\n              key={route.key}\n              value={descriptors[route.key].navigation}\n            >\n              <NavigationRouteContext.Provider value={route}>\n                <BottomTabItem\n                  route={route}\n                  focused={focused}\n                  horizontal={hasHorizontalLabels}\n                  onPress={onPress}\n                  onLongPress={onLongPress}\n                  accessibilityLabel={accessibilityLabel}\n                  to={buildLink(route.name, route.params)}\n                  testID={options.tabBarTestID}\n                  allowFontScaling={options.tabBarAllowFontScaling}\n                  activeTintColor={tabBarActiveTintColor}\n                  inactiveTintColor={tabBarInactiveTintColor}\n                  activeBackgroundColor={tabBarActiveBackgroundColor}\n                  inactiveBackgroundColor={tabBarInactiveBackgroundColor}\n                  button={options.tabBarButton}\n                  icon={\n                    options.tabBarIcon ??\n                    (({ color, size }) => (\n                      <MissingIcon color={color} size={size} />\n                    ))\n                  }\n                  badge={options.tabBarBadge}\n                  badgeStyle={options.tabBarBadgeStyle}\n                  label={label}\n                  showLabel={tabBarShowLabel}\n                  labelStyle={options.tabBarLabelStyle}\n                  iconStyle={options.tabBarIconStyle}\n                  style={options.tabBarItemStyle}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          );\n        })}\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderTopWidth: StyleSheet.hairlineWidth,\n    elevation: 8,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n"]},"metadata":{},"sourceType":"script"}